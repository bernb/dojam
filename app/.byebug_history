c
result
r
c
_options
_key
exception
c
exception
_key
c
_options
exception
_key
c
exception
_key
c
_key
c
_options
_key
c
_key
key
exception.message
s
n
s
n
result
n
locale
n
s
n
**options
options
n
s
h
n
Material.find(material_id).material_specifieds
Material.find(material_id)
material_id
c
n
flash
n
@results.blank?
@results
c
@results
c
n
params
c
n
@results
n
terms
n
c
xc
c
terms
results
c
results.count
results
c
results.count
results
c
Material < Termlist
@results.map(&:class).map(&:to_s)
@results.map(&:class)
@results.map(%:class)
@results.first
@results
n
s
termlist_result
c
    end
      end
        museum_object_result.append(object)
        termlist_result.append(termlist)
      objects&.each do |object|
      objects = termlist.museum_objects
termlists.each do |termlist|
museum_object_result
termlist_result
termlists.count
termlist.count
termlists = results.map{|t| Termlist.find(t.searchable_id)}
results.count
results = PgSearch.multisearch('blue')
results
result
results
n
list
h
where
info program
info breakpoints
info
h
n
s
continue
utqi
quqi
eitexit
quit
c
results
c
quit
k.museum_objects.count
k.museum_objects
k = Termlist.find 829
results.map{|r| Termlist.find(r.searchable_id)}
results
results.map{|r| Termlist.find(r.searchable_id)}.map{|t| t.museum_objects}
results.map{|r| Termlist.find(r.searchable_id)}
results
results.count
ActiveRecord::Base.connection.execute 'ROLLBACK'
results.count
results.map{|r| Termlist.find(r.searchable_id)}
results.map{|r| Termlist.find(r.searchable_id)}.map{|t| t.museum_objects}
results
c
results.map{|r| Termlist.find(r.searchable_id)}.map{|t| t.museum_objects}
results.map{|r| Termlist.find(r.searchable_id)}
results
c
results
quit
term.museum_objects
term
museum_object
MuseumObject.search(name)
term
result
quit
