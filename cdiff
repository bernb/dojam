class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end
class ColorsMsKooSpec < ApplicationRecord
  belongs_to :termlist_color
  belongs_to :material_specifieds_koo_spec
end
class ExcavationSite < ApplicationRecord
  belongs_to :termlist_excavation_site_kind, required: false, foreign_key: 'excavation_site_kind_id' # for now in dev state without validations
  has_many :museum_objects, inverse_of: :excavation_site
end
class JoinMuseumObjectColor < ApplicationRecord
  belongs_to :termlist_color, inverse_of: :join_museum_object_colors
  belongs_to :museum_object, inverse_of: :join_museum_object_colors
end
class JoinMuseumObjectDatingCentury < ApplicationRecord
  belongs_to :museum_object, required: false
  belongs_to :termlist_dating_century, required: false
end
class JoinMuseumObjectMaterialSpecified < ApplicationRecord
  belongs_to :museum_object
  belongs_to :termlist_material_specified
end
class MaterialSpecifiedsKooSpec < ApplicationRecord
  belongs_to :termlist_material_specified
  belongs_to :termlist_kind_of_object_specified
	has_many :colors_ms_koo_specs
	has_many :termlist_colors, through: :colors_ms_koo_specs
	has_many :prod_techs_ms_koo_specs
	has_many :termlist_production_techniques, through: :prod_techs_ms_koo_specs
end
class MuseumObjectImageList < ApplicationRecord
  belongs_to :museum_object
  has_many_attached :list
  has_one_attached :main
end
class MuseumObject < ApplicationRecord
  include SearchCop
  validates_with MuseumObjectValidator

  has_one :images, class_name: "MuseumObjectImageList", dependent: :destroy
  accepts_nested_attributes_for :images
  belongs_to :excavation_site, -> { order(name: :asc) }, required: false # do not require for now while in early dev state
  belongs_to :storage_location, required: false
  belongs_to :termlist_acquisition_delivered_by, -> { order(name: :asc) }, required: false
  belongs_to :termlist_acquisition_kind, -> { order(name: :asc) }, required: false
  belongs_to :termlist_authenticity, required: false
  belongs_to :termlist_dating_millennium, required: false
  belongs_to :termlist_dating_period, required: false
  belongs_to :termlist_kind_of_object, required: false
  belongs_to :termlist_kind_of_object_specified, required: false
  belongs_to :termlist_production_technique, required: false
  belongs_to :termlist_decoration_technique, required: false
  belongs_to :termlist_decoration_color, required: false
  belongs_to :termlist_decoration, required: false
  belongs_to :termlist_preservation_material, required: false
  belongs_to :termlist_preservation_object, required: false
  belongs_to :termlist_inscription_letter, required: false
  belongs_to :termlist_inscription_language, required: false
  belongs_to :termlist_excavation_site_kind, required: false
  has_many :join_museum_object_material_specifieds
  has_many :termlist_material_specifieds, through: :join_museum_object_material_specifieds
	# While the correct thought, due a bug in Rails 5.1 joins for the scoped do not
	# carry over a nested has_many call, so this can't be used to get properties
#	has_many :material_specifieds_koo_specs, -> (me) {
#		if me.termlist_kind_of_object_specified.present?
#			joins(:termlist_kind_of_object_specifieds)
#				where(termlist_kind_of_object_specified: me.termlist_kind_of_object_specified)
#		elsif me.termlist_kind_of_object.present?
#			self.joins(termlist_kind_of_object_specified: :termlist_kind_of_object).where(termlist_kind_of_objects: {id: me.termlist_kind_of_object.id})
#		end
#	}, through: :termlist_material_specifieds
  has_many :termlist_materials, -> { distinct }, through: :termlist_material_specifieds
  has_many :join_museum_object_colors, inverse_of: :museum_object
  has_many :termlist_colors, through: :join_museum_object_colors
  has_many :join_museum_object_dating_centuries
  has_many :termlist_dating_centuries, through: :join_museum_object_dating_centuries
	has_many :prod_techs_ms_koo_specs, through: :material_specifieds_koo_specs
	has_many :possible_production_techniques, through: :prod_techs_ms_koo_specs, source: :termlist_production_technique
  accepts_nested_attributes_for :excavation_site, reject_if: :all_blank, allow_destroy: true
  delegate :museum, to: :storage_location, allow_nil: true
  delegate :storage, to: :storage_location, allow_nil: true
  
  before_validation :set_is_used
  
  
  search_scope :search do
    attributes :inv_number, 
               :inv_extension, 
               :inv_numberdoa, 
               :acquisition_deliverer_name, 
               :acquisition_date,
               :finding_context, 
               :finding_remarks, 
               :priority, 
               :priority_determined_by,
               :inscription_decoration, 
               :inscription_text, 
               :inscription_translation, 
               :acquisition_document_number, 
               :name_expedition, 
               :site_number_mega, 
               :site_number_expedition,
               :description_conservation,
               :remarks, 
               :literature
    attributes storage_location: "storage_location.name"
    attributes termlist_preservation_material: "termlist_preservation_material.name"
    attributes termlist_excavation_site_kind: "termlist_excavation_site_kind.name"
    attributes termlist_authenticity: "termlist_authenticity.name"
    attributes termlist_preservation_object: "termlist_preservation_object.name"
    attributes termlist_inscription_language: "termlist_inscription_language.name"
    attributes termlist_kind_of_object: "termlist_kind_of_object.name"
    attributes termlist_kind_of_object_specified: "termlist_kind_of_object_specified.name"
    attributes termlist_decoration: "termlist_decoration.name"
    attributes termlist_acquisition_delivered_by: "termlist_acquisition_delivered_by.name"
    attributes termlist_dating_millennium: "termlist_dating_millennium.name"
    attributes termlist_production_technique: "termlist_production_technique.name"
    attributes termlist_decoration_color: "termlist_decoration_color.name"
    attributes termlist_inscription_letter: "termlist_inscription_letter.name"
    attributes termlist_inscription_language: "termlist_inscription_language.name"
    attributes excavation_site: "excavation_site.name"
    attributes termlist_material: "termlist_materials.name"
    
                                          
  end

	def get_possible_props_for property_name
		PropsGetter.call termlist_material_specified: self.termlist_material_specifieds.first, termlist_kind_of_object_specified: self.termlist_kind_of_object_specified, termlist_kind_of_object: self.termlist_kind_of_object, property_name: property_name
	end

  # is_used activates validations, supposed to get set after first save
  # as wickeg gem needs a valid/created entry to work
  # note that is_set will also reroll if validation fails  
  def set_is_used
    self.is_used = true unless self.new_record?
  end
  
  # Returns associated material specifieds only for given material
  def termlist_material_specifieds_for material
     TermlistMaterialSpecified.where(termlist_material: material).joins(:museum_objects).where(museum_objects: {id: self.id})
  end
  
  def card
    MuseumCardDecorator.new(self)
  end
  
  def has_material? material
    self.termlist_materials.ids.include? material.id
  end
  
  
end
class Museum < ApplicationRecord
  has_many :storages
end
class ProdTechsMsKooSpec < ApplicationRecord
  belongs_to :termlist_production_technique
  belongs_to :material_specifieds_koo_spec
end
class StorageLocation < ApplicationRecord
  belongs_to :storage
  delegate :museum, to: :storage
end
class Storage < ApplicationRecord
  belongs_to :museum
  has_many :storage_locations
end
class TermlistAcquisitionDeliveredBy < ApplicationRecord
  has_many :museum_objects
end
class TermlistAcquisitionKind < ApplicationRecord
  has_many :museum_objects
end
class TermlistAuthenticity < ApplicationRecord
  has_many :museum_objects
end
class TermlistColor < ApplicationRecord
  has_many :join_museum_object_colors, inverse_of: :termlist_color
  has_many :museum_objects, through: :join_museum_object_colors
  has_many :colors_ms_koo_specs
  has_many :material_specifieds_koo_specs, through: :colors_ms_koo_specs
  has_many :termlist_material_specifieds, through: :material_specifieds_koo_specs
end 
class TermlistConservation < ApplicationRecord
end
class TermlistDatingCentury < ApplicationRecord
  acts_as_list
  has_many :join_museum_object_dating_centuries
  has_many :museum_objects, through: :join_museum_object_dating_centuries
  default_scope { order(position: :asc) }
end
class TermlistDatingMillennium < ApplicationRecord
  acts_as_list 
  has_many :museum_objects
  default_scope { order(position: :asc) }
end
class TermlistDatingPeriod < ApplicationRecord
  acts_as_list 
  has_many :museum_objects
  default_scope { order(position: :asc) }
end
class TermlistDecorationColor < ApplicationRecord
  has_many :museum_objects
end
class TermlistDecoration < ApplicationRecord
  has_many :museum_objects
  has_many :termlist_kind_of_object_specified, through: :termlist_kind_of_object_specifieds_decorations
end
class TermlistDecorationTechnique < ApplicationRecord
	has_many :material_specifieds_koo_specs, through: :termlist_kind_of_object_specifieds_decoration_techniques
  has_many :museum_objects
end
class TermlistExcavationSiteCategory < ApplicationRecord
  has_many :termlist_excavation_site_kinds, -> { order(name: :asc) }
end
class TermlistExcavationSiteKind < ApplicationRecord
  belongs_to :termlist_excavation_site_category
end
class TermlistInscriptionLanguage < ApplicationRecord
  has_many :museum_objects
end
class TermlistInscriptionLetter < ApplicationRecord
  has_many :museum_objects
end
class TermlistKindOfObject < ApplicationRecord
	alias_attribute :props, :material_specifieds_koo_specs
  has_many :museum_objects
	# all_koos only used for easier asscociation navigation
	# So at the end of class it is declared private
	has_many :all_koos, class_name: "TermlistKindOfObjectSpecified"
	has_many :material_specifieds_koo_specs, through: :all_koos
	

	def termlist_material_specifieds
		TermlistMaterialSpecified.joins(:termlist_kind_of_object_specifieds).where(termlist_kind_of_object_specifieds: {termlist_kind_of_object: self})
	end
	private :all_koos
end
class TermlistKindOfObjectSpecified < ApplicationRecord
	alias_attribute :props, :material_specifieds_koo_specs
  belongs_to :termlist_kind_of_object, required: false
  has_many :museum_objects
	has_many :material_specifieds_koo_specs
	has_many :termlist_material_specifieds, through: :material_specifieds_koo_specs do
		# We enforce uniqueness of join table on database level
		# So we avoid UniquenessViolation by altering the often used shovel operator
		def << (value)
			super value unless self.include? value
		end
	end
	has_many :colors_ms_koo_specs, through: :material_specifieds_koo_specs
  has_many :termlist_colors, through: :colors_ms_koo_specs
	has_many :prod_techs_ms_koo_specs, through: :material_specifieds_koo_specs
	has_many :termlist_production_techniques, through: :prod_techs_ms_koo_specs

end
class TermlistMaterial < ApplicationRecord
  has_many :termlist_material_specifieds
  has_many :termlist_kind_of_objects, through: :termlist_material_specifieds
end
class TermlistMaterialSpecified < ApplicationRecord
	alias_attribute :props, :material_specifieds_koo_specs
  belongs_to :termlist_material
  has_many :join_museum_object_material_specifieds
  has_many :museum_objects, through: :join_museum_object_material_specifieds
	has_many :material_specifieds_koo_specs
		def << (value)
			super value unless self.include? value
		end
	end
	has_many :termlist_kind_of_objects, -> { distinct }, through: :termlist_kind_of_object_specifieds
	has_many :prod_techs_ms_koo_specs, through: :material_specifieds_koo_specs
	has_many :termlist_production_techniques, through: :prod_techs_ms_koo_specs

end
class TermlistPreservationMaterial < ApplicationRecord
  has_many :museum_objects
end
class TermlistPreservationObject < ApplicationRecord
  has_many :museum_objects
end
class TermlistProductionTechnique < ApplicationRecord
	has_many :prod_techs_ms_koo_specs
	has_many :material_specifieds_koo_specs, through: :prod_techs_ms_koo_spe